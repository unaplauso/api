services:
  db:
    image: postgres:alpine
    container_name: unaplauso-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    networks:
      - unaplauso-network
    volumes:
      - ./.db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']

  redis:
    image: redis:alpine
    container_name: unaplauso-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    networks:
      - unaplauso-network
    healthcheck:
      test:
        ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', '--raw', 'incr', 'ping']

  gateway:
    container_name: unaplauso-gateway
    env_file: ./.env
    build:
      context: .
      target: unaplauso-gateway
    ports:
      - '${GATEWAY_PORT}:${GATEWAY_PORT}'
    networks:
      - unaplauso-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  auth:
    container_name: unaplauso-auth
    env_file: ./.env
    build:
      context: .
      target: unaplauso-auth
    ports:
      - '${AUTH_PORT}:${AUTH_PORT}'
    networks:
      - unaplauso-network
    depends_on:
      - gateway
    restart: always

  audit:
    container_name: unaplauso-audit
    env_file: ./.env
    build:
      context: .
      target: unaplauso-audit
    networks:
      - unaplauso-network
    depends_on:
      - gateway
    restart: always

  file:
    container_name: unaplauso-file
    env_file: ./.env
    build:
      context: .
      target: unaplauso-file
    networks:
      - unaplauso-network
    depends_on:
      - gateway
    restart: always

volumes:
  db_data:

networks:
  unaplauso-network:
